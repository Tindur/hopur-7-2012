#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameSchool.Models.dbLINQ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="verk2012_hopur07")]
	public partial class GlossaryDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGlossaryModel(GlossaryModel instance);
    partial void UpdateGlossaryModel(GlossaryModel instance);
    partial void DeleteGlossaryModel(GlossaryModel instance);
    #endregion
		
		public GlossaryDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["verk2012_hopur07ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GlossaryDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GlossaryDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GlossaryDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GlossaryDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GlossaryModel> GlossaryModels
		{
			get
			{
				return this.GetTable<GlossaryModel>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GlossaryModel")]
	public partial class GlossaryModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CouseID;
		
		private System.Nullable<int> _Upvotes;
		
		private System.Nullable<int> _Downvotes;
		
		private string _Source;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCouseIDChanging(int value);
    partial void OnCouseIDChanged();
    partial void OnUpvotesChanging(System.Nullable<int> value);
    partial void OnUpvotesChanged();
    partial void OnDownvotesChanging(System.Nullable<int> value);
    partial void OnDownvotesChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public GlossaryModel()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CouseID", DbType="Int NOT NULL")]
		public int CouseID
		{
			get
			{
				return this._CouseID;
			}
			set
			{
				if ((this._CouseID != value))
				{
					this.OnCouseIDChanging(value);
					this.SendPropertyChanging();
					this._CouseID = value;
					this.SendPropertyChanged("CouseID");
					this.OnCouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Upvotes", DbType="Int")]
		public System.Nullable<int> Upvotes
		{
			get
			{
				return this._Upvotes;
			}
			set
			{
				if ((this._Upvotes != value))
				{
					this.OnUpvotesChanging(value);
					this.SendPropertyChanging();
					this._Upvotes = value;
					this.SendPropertyChanged("Upvotes");
					this.OnUpvotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Downvotes", DbType="Int")]
		public System.Nullable<int> Downvotes
		{
			get
			{
				return this._Downvotes;
			}
			set
			{
				if ((this._Downvotes != value))
				{
					this.OnDownvotesChanging(value);
					this.SendPropertyChanging();
					this._Downvotes = value;
					this.SendPropertyChanged("Downvotes");
					this.OnDownvotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
